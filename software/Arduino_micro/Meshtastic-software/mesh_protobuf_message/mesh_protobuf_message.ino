/*
test mestastic decode message
compiled in an arduino uno
10822 flash bytes (33%) of 32256 bytes.
674 RAM bytes (32%)
nanopb-0.4.9.1-windows-x86
https://jpa.kapsi.fi/nanopb/download/
files list in
C:\Users\myname\Documents\Arduino\libraries\Nanopb
pb.h
pb_common.c
pb_common.h
pb_decode.c
pb_decode.h
pb_encode.c
pb_encode.h
--------------
https://github.com/meshtastic/firmware/tree/master/src/mesh/generated/meshtastic (Generated by nanopb-0.4.9.1)
files list in the project directory: (with path meshtastic/ removed in *.cpp and mesh.pb.h files)
mesh.ino
channel.pb.cpp
channel.pb.h
config.pb.cpp
config.pb.h
device_ui.pb.cpp
device_ui.pb.h
mesh.pb.cpp
mesh.pb.h
module_config.pb.cpp
module_config.pb.h
portnums.pb.cpp
portnums.pb.h
telemetry.pb.cpp
telemetry.pb.h
xmodem.pb.cpp
xmodem.pb.h
---------------
Results in the serial monitor:
Decoded test_number: 1
Test
Thanks to Igor !!
*/

#include "mesh.pb.h"
#include "pb_common.h"
#include "pb.h"
//#include "pb_encode.h"
#include "pb_decode.h"

/// helper function for decoding a record as a protobuf, we will return false if the decoding failed
bool pb_decode_from_bytes(const uint8_t *srcbuf, size_t srcbufsize, const pb_msgdesc_t *fields, void *dest_struct) {
  pb_istream_t stream = pb_istream_from_buffer(srcbuf, srcbufsize);
  if (!pb_decode(&stream, fields, dest_struct)) {
    char buf[100];
    sprintf("Can't decode protobuf reason='%s', pb_msgdesc %p", PB_GET_ERROR(&stream), fields);
    Serial.println(buf);
    return false;
  } else {
    return true;
  }
}


void setup() {

  Serial.begin(115200);

  uint8_t buffer[] = { 0x08, 0x01, 0x12, 0x04, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00 };  //text message
  meshtastic_Data decoded_message meshtastic_Data_init_zero;
  bool status;
  
  status=pb_decode_from_bytes(buffer, sizeof(buffer), meshtastic_Data_fields, &decoded_message);

    if (!status) {
    Serial.println("Failed to decode");
    return;
  }

  Serial.print("Decoded test_number: ");
  Serial.println(decoded_message.portnum);

  meshtastic_Data_payload_t payload = decoded_message.payload;
  char *buf = malloc(payload.size + 1);      // because of terminating `\0`
  memcpy(buf, payload.bytes, payload.size);  // copy the message
  buf[payload.size] = '\0';                  // force '\0' termination
  Serial.println(buf);
  free(buf);
}

void loop() {}